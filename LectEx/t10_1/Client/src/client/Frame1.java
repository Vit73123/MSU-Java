
package client;

import java.awt.Toolkit;
import java.awt.Color;

import java.awt.event.KeyEvent;
import java.awt.Event;

import java.awt.Rectangle;

import java.util.Hashtable;

import javax.swing.Action;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.Keymap;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledEditorKit;

/**
 *
 * @author Vladimir
 */
public class Frame1 extends javax.swing.JFrame {
    
    @SuppressWarnings({ "compatibility:7630340886649842506", "oracle.jdeveloper.java.serialversionuid-stale" })
    private static final long serialVersionUID = 1L;
    
    StyledDoc1 styleDoc1;
    static final int MAX_CHARACTERS = 500;
    
    // В массиве actions формируется таблица
    Hashtable actions;

    // Для доступа к действию
    @SuppressWarnings("oracle.jdeveloper.java.field-not-serializable")
    Action action;
    
    // Таблица ключей акселераторов
    Keymap keymap;

    /** Creates new form Frame1 */
    public Frame1() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jScrollPane1 = new javax.swing.JScrollPane();
        // Создание и конфигурирование текстовой панели и помещение в неё объекта styleDoc1
        initTextPane();
        textPane = new javax.swing.JTextPane(styleDoc1);
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea_inf = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        // Создание линейки меню
        mb = new javax.swing.JMenuBar();
        initMenu();
        editMenu = new javax.swing.JMenu();
        itemCut = new javax.swing.JMenuItem();
        itemCopy = new javax.swing.JMenuItem();
        itemPaste = new javax.swing.JMenuItem();
        itemSelectAll = new javax.swing.JMenuItem();
        styleMenu = new javax.swing.JMenu();
        itemBold = new javax.swing.JMenuItem();
        itemItalic = new javax.swing.JMenuItem();
        itemUnderline = new javax.swing.JMenuItem();
        itemFontSize12 = new javax.swing.JMenuItem();
        itemFontSize14 = new javax.swing.JMenuItem();
        itemFontSize16 = new javax.swing.JMenuItem();
        itemFontSize18 = new javax.swing.JMenuItem();
        itemFontTimes = new javax.swing.JMenuItem();
        itemFontArial = new javax.swing.JMenuItem();
        itemForegroundRed = new javax.swing.JMenuItem();
        itemForegroundGreen = new javax.swing.JMenuItem();
        itemForegroundBlue = new javax.swing.JMenuItem();
        itemForegroundBlack = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        initTextPaneKeymap();
        textPane.setKeymap(keymap);
        textPane.setMargin(new java.awt.Insets(5, 5, 5, 5));
        textPane.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                Frame1.this.caretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(textPane);
        initTextPaneModel();

        textArea_inf.setColumns(20);
        textArea_inf.setRows(5);
        jScrollPane2.setViewportView(textArea_inf);

        editMenu.setText("Правка");

        itemCut.setAction(initMenuEditCutAction());
        editMenu.add(itemCut);

        itemCopy.setAction(initMenuEditCopyAction());
        editMenu.add(itemCopy);

        itemPaste.setAction(initMenuEditPasteAction());
        editMenu.add(itemPaste);
        editMenu.addSeparator();

        itemSelectAll.setAction(initMenuEditSelectAllAction());
        editMenu.add(itemSelectAll);

        mb.add(editMenu);

        styleMenu.setText("Стиль");

        itemBold.setAction(initMenuStyleBoldAction());
        styleMenu.add(itemBold);

        itemItalic.setAction(initMenuStyleItalicAction());
        styleMenu.add(itemItalic);

        itemUnderline.setAction(initMenuStyleUnderlineAction());
        styleMenu.add(itemUnderline);
        styleMenu.addSeparator();

        itemFontSize12.setAction(initMenuStyleFontSize12Action());
        styleMenu.add(itemFontSize12);

        itemFontSize14.setAction(initMenuStyleFontSize14Action());
        styleMenu.add(itemFontSize14);

        itemFontSize16.setAction(initMenuStyleFontSize16Action());
        styleMenu.add(itemFontSize16);

        itemFontSize18.setAction(initMenuStyleFontSize18Action());
        styleMenu.add(itemFontSize18);
        styleMenu.addSeparator();

        itemFontTimes.setAction(initMenuStyleFontTimesAction());
        styleMenu.add(itemFontTimes);

        itemFontArial.setAction(initMenuStyleFontArialAction());
        styleMenu.add(itemFontArial);
        styleMenu.addSeparator();

        itemForegroundRed.setAction(initMenuStyleForegroundRedAction());
        styleMenu.add(itemForegroundRed);

        itemForegroundGreen.setAction(initMenuStyleForegroundGreenAction());
        styleMenu.add(itemForegroundGreen);

        itemForegroundBlue.setAction(initMenuStyleForegroundBlueAction());
        styleMenu.add(itemForegroundBlue);

        itemForegroundBlack.setAction(initMenuStyleForegroundBlackAction());
        styleMenu.add(itemForegroundBlack);

        mb.add(styleMenu);

        setJMenuBar(mb);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }//GEN-END:initComponents

// Реализация блока прослушивания для курсора ввода:
// при изменении позиции ввода выполняет отображение текста
    private void caretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_caretUpdate
        // TODO add your handling code here:

        // Обработка изменения позиции курсора ввода

        // Выделения нет
        if (evt.getDot() == evt.getMark()) {
            try {
                Rectangle caretCoords = textPane.modelToView(evt.getDot());
                setText("курсор ввода: позиция : " + evt.getDot() +
                        ", координаты = [" + caretCoords.x + ", " + caretCoords.y + "]" +
                        "\n");
            } catch (BadLocationException ble) {
                setText("курсор ввода: позиция: " + evt.getDot() + "\n");
            }
        } else if (evt.getDot() < evt.getMark()) {
            setText("выделены символы с: " + evt.getDot() + " по " + evt.getMark() + "\n");
        } else {
            setText("выделены символы с: " + evt.getMark() + " по " + evt.getDot() + "\n");
        }
    }//GEN-LAST:event_caretUpdate

    private void initTextPane() {
        styleDoc1 = new StyledDoc1(MAX_CHARACTERS);
        styleDoc1.addDocumentListener(new MyDocumentListener());
    }
     
    private void initTextPaneModel() {   
        // Область для выдачи информационных сообщений (внизу)
        String stringForPane[] = {
        "При щелчке мышью инициируется событие caretUpdate, определяемое в интерфейсе CaretListener",
        "Этот текст можно редактировать",
        "Меню Правка содержит команды для работы",
        "с буфером обмена и для отмены/повтора действий.",
        "Меню Стиль предназначается для форматирования текста.",
        "Для перемещения по тексту определены следующие ключи акселераторы",
        "                    ctrl+f, ctrl+b, ctrl+n, ctrl+p."};
        
        // Создание массива набора атрибутов стиля
        SimpleAttributeSet[] attrs = new SimpleAttributeSet[stringForPane.length + 1];
        
        // Определение общего набора атрибутов
        
        // Создание набора атрибутов
        attrs[0] = new SimpleAttributeSet();
        
        // Установка значения атрибутов
        StyleConstants.setFontFamily(attrs[0], "SansSerif");
        StyleConstants.setFontSize(attrs[0], 14);
        
        // Создаём отдельный набор атрибутов для каждой добавляемой в textPane строке
        attrs[1] = new SimpleAttributeSet(attrs[0]);
        StyleConstants.setFontSize(attrs[1], 16);
        StyleConstants.setBold(attrs[1], true);

        attrs[2] = new SimpleAttributeSet(attrs[0]);
        StyleConstants.setItalic(attrs[2], true);

        attrs[3] = new SimpleAttributeSet(attrs[0]);
        StyleConstants.setItalic(attrs[3], true);
        StyleConstants.setFontSize(attrs[3], 12);

        attrs[4] = new SimpleAttributeSet(attrs[0]);
        StyleConstants.setItalic(attrs[4], true);
        StyleConstants.setFontSize(attrs[4], 12);
        
        attrs[5] = new SimpleAttributeSet(attrs[0]);
        
        attrs[6] = new SimpleAttributeSet(attrs[0]);
        
        attrs[7] = new SimpleAttributeSet(attrs[0]);
        StyleConstants.setForeground(attrs[7], Color.red);
        
        try {
            for (int i = 0; i < stringForPane.length; i++) {
                // Добавляем в документ строки, указывая применяемый набор атрибутов
                styleDoc1.insertString(styleDoc1.getLength(), stringForPane[i] + "\n", attrs[i + 1]);
            }
        } catch (BadLocationException ble) {
            System.err.println("Ошибка при вставке текста");
        }
    }

    @SuppressWarnings("unchecked")
    public void initMenu() {
        actions = new Hashtable();
        
        // Таблица доступных действий
        Action[] actionsArray = textPane.getActions();
        for (int i = 0; i < actionsArray.length; i++) {
            Action a = actionsArray[i];
            actions.put(a.getValue(Action.NAME), a);
        }
        
    }
    
    private Action initMenuEditCutAction() {
        action = new DefaultEditorKit.CutAction();
        action.putValue(Action.NAME, "Вырезать");
        return (Action) (actions.get(DefaultEditorKit.cutAction));
    }
    
    private Action initMenuEditCopyAction() {
        return (Action) (actions.get(DefaultEditorKit.copyAction));
    }
    
    private Action initMenuEditPasteAction() {
        return (Action) (actions.get(DefaultEditorKit.pasteAction));
    }
    
    private Action initMenuEditSelectAllAction() {
        return (Action) (actions.get(DefaultEditorKit.selectAllAction));
    }

    private Action initMenuStyleBoldAction() {
        action = new StyledEditorKit.BoldAction();
        action.putValue(Action.NAME, "Полужирный");
        return action;
    }
    
    private Action initMenuStyleItalicAction() {
        action = new StyledEditorKit.ItalicAction();
        action.putValue(Action.NAME, "Курсив");
        return action;
    }
    
    private Action initMenuStyleUnderlineAction() {
        action = new StyledEditorKit.ItalicAction();
        action.putValue(Action.NAME, "Подчёркнутый");
        return action;
    }
    
    private Action initMenuStyleFontSize12Action() {
        return new StyledEditorKit.FontSizeAction("12", 12);
    }
    
    private Action initMenuStyleFontSize14Action() {
        return new StyledEditorKit.FontSizeAction("14", 14);
    }

    private Action initMenuStyleFontSize16Action() {
        return new StyledEditorKit.FontSizeAction("16", 16);
    }
    
    private Action initMenuStyleFontSize18Action() {
        return new StyledEditorKit.FontSizeAction("18", 18);
    }
    
    private Action initMenuStyleFontTimesAction() {
        return new StyledEditorKit.FontFamilyAction("Шрифт Times", "Serif");
    }
    
    private Action initMenuStyleFontArialAction() {
        return new StyledEditorKit.FontFamilyAction("Шрифт Arial", "SansSerif");
    }
    
    private Action initMenuStyleForegroundRedAction() {
        return new StyledEditorKit.ForegroundAction("Красный", Color.red);
    }
    
    private Action initMenuStyleForegroundGreenAction() {
        return new StyledEditorKit.ForegroundAction("Зелёный", Color.green);
    }
    
    private Action initMenuStyleForegroundBlueAction() {
        return new StyledEditorKit.ForegroundAction("Синий", Color.blue);
    }
    
    private Action initMenuStyleForegroundBlackAction() {
        return new StyledEditorKit.ForegroundAction("Чёрный", Color.black);
    }

    @SuppressWarnings("oracle.jdeveloper.java.semantic-warning")
    private void initTextPaneKeymap() {
        keymap = textPane.addKeymap("MyKeymap", textPane.getKeymap());
        
        // 1. Определение действия (Ctrl+b выполняет backwardAction)
        action = (Action) (actions.get(DefaultEditorKit.backwardAction));
        // 2. Создание ключа акселератора
        KeyStroke key = KeyStroke.getKeyStroke(KeyEvent.VK_B, Event.CTRL_MASK);
        // 3. Связывание действия с ключём акселератором
        keymap.addActionForKeyStroke(key, action);
        // Ctrl+f выполняет forwardAction
        action = (Action) (actions.get(DefaultEditorKit.forwardAction));
        key = KeyStroke.getKeyStroke(KeyEvent.VK_F, Event.CTRL_MASK);
        keymap.addActionForKeyStroke(key, action);
        // Ctrl+p выполняет upAction
        action = (Action) (actions.get(DefaultEditorKit.upAction));
        key = KeyStroke.getKeyStroke(KeyEvent.VK_P, Event.CTRL_MASK);
        keymap.addActionForKeyStroke(key, action);
        // Ctrl+n выполняет downAction
        action = (Action) (actions.get(DefaultEditorKit.downAction));
        key = KeyStroke.getKeyStroke(KeyEvent.VK_N, Event.CTRL_MASK);
        keymap.addActionForKeyStroke(key, action);
    }

    @SuppressWarnings("oracle.jdeveloper.java.inner-class-serializable")
    public class StyledDoc1 extends DefaultStyledDocument {
        @SuppressWarnings({ "compatibility:-1669862371026291586", "oracle.jdeveloper.java.serialversionuid-stale" })
        private static final long serialVersionUID = 1L;

        int maxCharacters;
        
        public StyledDoc1(int maxChars) {
            maxCharacters = maxChars;
        }
        
        public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
            if ((getLength() + str.length()) <= maxCharacters) {
                super.insertString(offs, str, a);
            } else {
                Toolkit.getDefaultToolkit().beep();
            }
        }
    }
    
    protected class MyDocumentListener implements DocumentListener {
        
        public void insertUpdate(DocumentEvent documentEvent) {
            printTo_textArea_inf(documentEvent);
        }

        @Override
        public void removeUpdate(DocumentEvent documentEvent) {
            // TODO Implement this method
            printTo_textArea_inf(documentEvent);
        }

        @Override
        public void changedUpdate(DocumentEvent documentEvent) {
            // TODO Implement this method
            printTo_textArea_inf(documentEvent);
        }
        
        private void printTo_textArea_inf(DocumentEvent evt) {
            Document doc = evt.getDocument();
            int changeLength = evt.getLength();
            textArea_inf.append(evt.getType().toString() + ": " + changeLength + " симв." +
                                " Общая длина текста = " + doc.getLength() + "." + "\n");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing
                                                                   .UIManager
                                                                   .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing
                         .UIManager
                         .setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util
                .logging
                .Logger
                .getLogger(Frame1.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util
                .logging
                .Logger
                .getLogger(Frame1.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util
                .logging
                .Logger
                .getLogger(Frame1.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util
                .logging
                .Logger
                .getLogger(Frame1.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt
            .EventQueue
            .invokeLater(new Runnable() {
                public void run() {
                    new Frame1().setVisible(true);
                }
            });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem itemBold;
    private javax.swing.JMenuItem itemCopy;
    private javax.swing.JMenuItem itemCut;
    private javax.swing.JMenuItem itemFontArial;
    private javax.swing.JMenuItem itemFontSize12;
    private javax.swing.JMenuItem itemFontSize14;
    private javax.swing.JMenuItem itemFontSize16;
    private javax.swing.JMenuItem itemFontSize18;
    private javax.swing.JMenuItem itemFontTimes;
    private javax.swing.JMenuItem itemForegroundBlack;
    private javax.swing.JMenuItem itemForegroundBlue;
    private javax.swing.JMenuItem itemForegroundGreen;
    private javax.swing.JMenuItem itemForegroundRed;
    private javax.swing.JMenuItem itemItalic;
    private javax.swing.JMenuItem itemPaste;
    private javax.swing.JMenuItem itemSelectAll;
    private javax.swing.JMenuItem itemUnderline;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenuBar mb;
    private javax.swing.JMenu styleMenu;
    // Область для выдачи информационных сообщений (внизу)
    private javax.swing.JTextArea textArea_inf;
    // Область редактирования и форматирования текста (вверху)
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables

}
